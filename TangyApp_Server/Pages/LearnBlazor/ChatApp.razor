@page "/learnblazor/chatapp"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
@inject IJSRuntime _jSRuntime
@implements IAsyncDisposable
<h3>SignalR Chat</h3>
@if(!IsConnected)
{
    <div class="input-group">
        <input class="input-group" @bind-value=User placeholder="Please enter your name"/>
        <button @onclick=Connect class="btn btn-primary">Connect</button>
    </div>
}
else
{
    <textarea @ref="OutputTextArea" style="width: 100%; height: 500px;" class="form-group-append">
        @Messages
    </textarea>

    <div class="input-group">  
    <input class="form-group-append" @bind-value=Message @bind-value:event=oninput @onkeyup=HandleInput/>
    <button class="btn btn-primary" @onclick=Send disabled=@(!IsConnected)>Send</button>
    </div>
}

@code {
    public HubConnection? hubConnection;
    public string Message { get; set; } = String.Empty;
    public string User { get; set; } = String.Empty;
    public string Messages { get; set; } = String.Empty;
    public ElementReference OutputTextArea { get; set; }

    public async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(navigationManager.ToAbsoluteUri($"/chathub?username={User}")).Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string>("GetTheMessage", (user, message) =>
        {
            var msg = $"{(String.IsNullOrEmpty(user) ? "" : user + ": ")}{message}\n";
            Messages += msg;
            _jSRuntime.InvokeVoidAsync("ScrollToBottom", OutputTextArea);
            StateHasChanged();
        });
        
    }

    public async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", User, Message);
            Message = string.Empty;
        }
    }

    public async Task HandleInput(KeyboardEventArgs e)
    {
        if(e.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    public bool IsConnected => (hubConnection?.State == HubConnectionState.Connected);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }
}
